from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.runnables import RunnableLambda

BLOG_SEG = '<<Автопутешествия>>' # FUTURE FOR BLOGGER AGENT
PSYCHO_TYPE = '<<Психотип>>' # FUTURE FOR BLOGGER AGENT
DIALOGUE_SAMPLE='<<Пример диалог>>' # FUTURE FOR BLOGGER AGENT

FORBIDDEN_ANSWER = '<НЕКОРРЕКТНЫЙ ЗАПРОС>'
CORRECT_ANSWER = '<КОРРЕКТНЫЙ ЗАПРОС>'


VERY_COOL_NEWS='Новость очень нравится читателям'
COOL_NEWS='Новость в общем - то нравится читателям'
NEUTRAL_NEWS='Новость сомнительная, реакции читателей неоднозначны.'
VERY_BAD_NEWS='Читателям однозначно не понравилась новость из поста.'
NO_EMOJI='В посте не было никаких эмодзи'


CORE_RELEVANCE_THEME = ('Ты - професиональный анализтор входных сообщений от пользователя.' \
                      'Ты должен принимать только те просьбы от пользователя, ' \
                      'по которым можно найти важные новости и различных мировых новостей' \
                      'Ты знаешь список тем на которые нужно пропускать просьбу пользователя дальше.' \
                      'Если запрос пользователя никак не может отображаться на одну из тем в списке,' \
                      f'то ты должен ответить строго в виде: {FORBIDDEN_ANSWER}.' \
                      'Если запрос пользователя валидный - отображается на одну из тем в списке -' \
                      f'то ты должен ответить строго в виде: {CORRECT_ANSWER}.'\
                      'Пример входных данных:' \
                      'Запрос пользователя: Как дела ?' \
                      'Валидные темы: (какой - то список валидных тем).' \
                      'Пример ответа:' \
                      f'{FORBIDDEN_ANSWER}')

CORE_RELEVANCE_NEWS = ('Ты - професионнальны анализатор эмодзи, ты понимаешь язык эмодзи, и умеешь анализировать' \
                      'их количество и тип. На вход ты получаешь эмодзи и их количество в виде python словаря.' \
                     'Также ты, в качестве контекста, получаешь саму новость для анализа.' \
                     'Не рассуждай, дай ответ строго только в виде названия одного из следующих классов:' \
                     f'1. {VERY_COOL_NEWS}; 2. {COOL_NEWS}; 3. {NEUTRAL_NEWS}; 4. {VERY_BAD_NEWS}. 5.{NO_EMOJI}' \
                        'Пример ответа на входные данные:' \
                        'Новость: (какая - то новость)' \
                        'Эмодзи: (какой-то словарь с эмодзи и их количеством на посте)' \
                        'Пример ответа:' \
                        f'{VERY_COOL_NEWS}')


CORE_REWRITTER_PROMPT = 'Ты - профессиональный копирайтер-редактор,контент-менеджер, рерайтер!' \
                        'Твоя задача: изменять исходные тексты, посты так, чтобы они не были похожи на исходник,' \
                        'но при этом были интересны аудитории. При этом не разрешается использовать ' \
                        'эмодзи при формировании поста. Будь проще, формируй новости не особо ярко.' \
                        'Помимо этого, ты знаешь аггрегированную оценку поста от пользователей' \
                        'Ни в коем случае не давай каких - либо рассуждей, мыслей, благодарностей и прочего' \
                        'в формируемый ответ.Строго возвращай только отредактированный тобою текст/пост - и всё.'\
                        'НЕ ДАВАЙ КОММЕНТАРИИ ПО АГГРЕГИРОВАННОЙ ОЦЕНКИ.'\
                        'Не используй тэгирование (в том числе и через с #)'\
                        'Не вставляй ссылки, в том числе названия у оригинального источника новости,'\
                        'обычно начинается на @ если это телеграм каналы, https/http и т.д'\

CORE_MAPPER_PROMPT = 'Ты - умелец, который умеет по теме пользователя корректно определять поисковый endpoint' \
                        'для поисковой системы. Поисковые заголовки представлены в виде python списка.' \
                        'Твоя задача - только выбрать нужный элемент из списка, соответствующией поисковому запросу' \
                        'Например, в списке есть endpoint business. Это означает что по данному endpoint' \
                        'будут разделы, связанные с бизнесом. То есть суть у них проста:' \
                        'название endpoint отображает смысл поискового запроса.' \
                        'Пример:' \
                        'Запрос пользователя: Посты о технологиях и айти.' \
                        'Список endpointов: ["business", "tech", "pics"]' \
                        'Пример ответа:' \
                        'tech'

CORE_CTX_GENERATOR_POST_PROMPT = 'Ты - контекстный креативщик! Ты умеешь писать посты для телеграм канала по' \
                                 'найденному контентну из интернета в данной теме!' \
                                 'Твоя задача, создать пост в Телеграм канал пользователя по данному запросу и ' \
                                 'найденному контенту в интернете. Иногда, если запрос пользователя cвязан с техническими '\
                                 'какими-то нюансами, деталями, то попробуй добавить в пост какие - то примеры, как и что технически'\
                                 ' устроено в данном запросе по данной теме.'\
                                 'Формируй новости не особо ярко. Не используй эмодзи.'\
                                 'Не используй тэгирование'\
                                 'Старайся быть кратким, большие посты не нужны'\


CORE_BLOGGER_PROMPT = f'Ты - профессиональный блогер по теме `{BLOG_SEG}`'\
                      'Твоя задача, зная психотип, характер пользователя, манеру общения в сети' \
                      'Повторять его образ, стиль.' \
                      f'Психотип пользователя: {PSYCHO_TYPE}' \
                      f'Пример диалога: {DIALOGUE_SAMPLE}' \



CORE_IMAGE_SELECTION = ("Ты - профессиональный фильтр изображений,"\
                        "и умеешь определять какое из них подходит наилучшим образом подходит под пост в телеграм канале."\
                        "В ответе дай строго номер картинки. Отсчет идет от 0. Если никакая картинка не подходит, то в ответе дай -1")


CORE_ADS_FILTER = ('Ты - профессиональный фильтр постов и умеешь отличать рекламный пост'\
                  ' от действительно тематической и нужного в данной тематике')

CORE_THEME_PROMPT = ('Ты - профессионал в выделении темы поста,\
                      который должен стать поисковым запросом в поисковой системе для подбора изображения к тексту.'\
                    'Твоя задача сформулировать небольшой поисковый запрос для поисковой системы исходя из поста')
                  

relevance_input_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_RELEVANCE_THEME),
                                             ("human",
                                              "Запрос пользователя: \n {user_message} \n"
                                              "Валидные темы: \n {themes} \n")])


relevance_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_RELEVANCE_NEWS),
                                             ("human","Эмодзи: \n {emoji_reactions} \n"
                                                      "Новость: \n {post} \n")])

simillar_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_MAPPER_PROMPT),
                                             ("human",
                                              "Запрос пользователя: \n {user_message} \n"
                                              "Список endpointов: \n {endpoints} \n")])


rewiritter_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_REWRITTER_PROMPT),
                                                       ("human","Найденный пост: \n {post} \n"
                                                        "Аггрегированная оценка от агента: \n {grade} \n")])


post_creator_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_CTX_GENERATOR_POST_PROMPT),
                                                  ("human","Запрос пользователя: \n {query} \n"
                                                   "Найденная контекстная информация из интернета: \n {web_ctx} \n"),
                                                   ])

ads_filter_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_ADS_FILTER),
                                                      ("human","Пост: \n {post} \n")])

theme_prompt = ChatPromptTemplate.from_messages([ ("system",CORE_THEME_PROMPT),
                                                  ("human","Пост: \n {post} \n")])

def image_text_prompt(input_dict: dict):

    contents = []
    for key, value in input_dict.items():
        if key != 'image_url':
            contents.append({"type": "text",'text': value})

    if image_url:= input_dict.get('image_url', None):
        if isinstance(image_url, list):
            for link in image_url:
                    contents += [{"type": "image_url",'image_url': {'url': link}}]
        else:
            contents += [{"type": "image_url",'image_url': {'url': image_url}}]

    return [SystemMessage(content=CORE_IMAGE_SELECTION),
            HumanMessage(content=contents)]



image_selection_prompt = RunnableLambda(image_text_prompt)